// Generated by CoffeeScript 1.7.1
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Fragment = {
    parse: function(template, data) {
      var lines, tree;
      lines = this._parseTemplate(template);
      tree = this._buildObjectTree(lines, 0);
      return this._buildDOMTree(tree, data);
    },
    _parseTemplate: function(template) {
      var line, lines, _i, _len, _results;
      lines = this._splitLines(template);
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line) {
          _results.push(this._readLine(line));
        }
      }
      return _results;
    },
    _splitLines: function(text) {
      return text.split(/\r?\n/);
    },
    _readLine: function(string) {
      var a, c, i, l, line, t, _ref;
      _ref = string.match(/(\s*)([\w-\.#]*)?({.*})?\s?(.*)?/i), l = _ref[0], i = _ref[1], t = _ref[2], a = _ref[3], c = _ref[4];
      line = {};
      line.indent = i.length / 2;
      if (t) {
        line.tagName = t;
      }
      if (a) {
        line.attributes = this._parseAttributes(a);
      }
      if (c) {
        line.content = this._parseContent(c);
      }
      return line;
    },
    _prepare: function(string, extra) {
      var safe;
      safe = string.replace(/@/g, "this.");
      if (extra) {
        safe = extra(safe);
      }
      return new Function("return " + safe + ";");
    },
    _parseAttributes: function(string) {
      if (/\:/.test(string)) {
        return this._prepare(string);
      } else {
        return this._prepare(string, function(s) {
          return s.replace(/\{|\}/g, "");
        });
      }
    },
    _parseContent: function(content) {
      var r;
      switch (false) {
        case !(r = content.match(/^=\s(.*)/)):
          return {
            type: 'expression',
            body: this._prepare(r[1])
          };
        case !(r = content.match(/^==\s(.*)/)):
          return {
            type: 'element',
            body: this._prepare(r[1])
          };
        case !(r = content.match(/^\|\s(.*)/)):
          return {
            type: 'string',
            body: r[1]
          };
        case !(r = content.match(/^\'\s(.*)/)):
          return {
            type: 'string',
            body: r[1] + " "
          };
        default:
          return {
            type: 'string',
            body: content
          };
      }
    },
    _buildObjectTree: function(lines, depth) {
      var children, line, out;
      out = [];
      while (line = lines.shift()) {
        if (line.indent < depth) {
          lines.unshift(line);
          break;
        } else if (line.content) {
          out.push(line);
        } else {
          children = this._buildObjectTree(lines, line.indent + 1);
          if (children.length) {
            line.children = children;
          }
          out.push(line);
        }
      }
      return out;
    },
    _buildDOMTree: function(tree, data) {
      var child, frag, obj, _i, _len;
      frag = document.createDocumentFragment();
      for (_i = 0, _len = tree.length; _i < _len; _i++) {
        obj = tree[_i];
        child = this._makeNode(obj, data);
        if (child) {
          frag.appendChild(child);
        }
      }
      return frag;
    },
    _makeNode: function(obj, data) {
      var c, el, node, result, tmp;
      if (obj.tagName) {
        node = this._makeElement(obj, data);
        if (c = obj.content) {
          if (c.type === 'string') {
            node.innerHTML = c.body;
          } else if (c.type === 'expression') {
            result = c.body.call(data);
            if (result) {
              node.innerHTML = result;
            }
          } else if (c.type === 'element') {
            result = c.body.call(data);
            if (result) {
              node.appendChild(result);
            }
          }
        }
        if (obj.children) {
          node.appendChild(this._buildDOMTree(obj.children, data));
        }
      } else if (c = obj.content) {
        if (c.type === 'string') {
          tmp = document.createElement('div');
          tmp.innerHTML = c.body;
          node = document.createDocumentFragment();
          while (el = tmp.firstChild) {
            node.appendChild(el);
          }
        }
        if (c.type === 'expression') {
          result = c.body.call(data);
          if (result) {
            node = document.createTextNode(result);
          }
        } else if (c.type === 'element') {
          result = c.body.call(data);
          if (result) {
            node = result;
          }
        }
      }
      return node;
    },
    _makeElement: function(obj, data) {
      var classes, el, id, k, string, tag, v, _ref, _ref1;
      _ref = obj.tagName.match(/(^[\w-]+)?(#[\w-]+)?((?:\.[\w-]+)*)?/i), string = _ref[0], tag = _ref[1], id = _ref[2], classes = _ref[3];
      el = document.createElement(tag != null ? tag : 'div');
      if (id) {
        el.id = id.replace('#', '');
      }
      if (classes) {
        el.className = classes.split('.').join(' ').trim();
      }
      if (obj.attributes) {
        _ref1 = obj.attributes.call(data);
        for (k in _ref1) {
          v = _ref1[k];
          el.setAttribute(k, v);
        }
      }
      return el;
    }
  };

}).call(this);
