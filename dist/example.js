// Generated by CoffeeScript 1.7.1
(function() {
  var root, template;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  template = "h1\n  ' Hello World\n  small Meet Fragment\n\np\n  ' Fragment is a dynamic, logic-less templating system that\n  | converts a very terse syntax into living dom nodes.\n\np\n  ' To use it, just include the <code>fragment.js</code> file\n  ' in your project, then call:\n\npre\n  code\n    | Fragment.parse(templateString,dataObject)\n\n\np The syntax looks a lot like Slim or Jade. Define a node as follows:\n\npre\n  code\n    | &lt;selector>{&lt;attributes>} &lt;directive> &lt;content>\n\np You can define tags with CSS selectors like:\n\npre\n  code\n    | p#myID.firstClass.secondClass Howdy!\n\np You can skip the tag name for divs:\n\npre\n  code\n    | .classy I'm a classy div!\n    br\n    | div I'm a div with no class!\n\np\n  | Control whitespace using ' or |:\n  ul\n    li = @pipeMessage\n    li = @aposMessage\n\np\n  ' You can use <code>=</code> at the beginning of a line, or after\n  ' a selector to interpolate a property of the object you passed in.\n  ' The code will be evaluated in the context of the object passed, so\n  ' reference the properties with <code>this.property</code>.\n\npre\n  code\n    | = this.plainText\n    br\n    | p = this.textInsideParagraph\n\np\n  ' If typing <code>this</code> isn't your favorite, you can use\n  ' <code>@</code> instead, like CoffeeScript. (That's all from Coffee though.)\n\np\n  ' The coolest feature, though, is this:\n  ' You can create\n  b living dom nodes&nbsp;\n  ' and insert them into a template.\n  ' These dom nodes will retain their event bindings,\n  ' meaning you can declare your events on the node\n  ' before rendering and they'll never get trashed\n  ' in a re-render.\n\np == @node()\n\np Pretty cool huh? Now try this input:\n\n== @input\n\np\n  ' Both elements were generated in code and dynamically\n  ' inserted into the template.";

  root.init = function() {
    var f, input;
    input = document.createElement('input');
    input.type = "text";
    f = Fragment.parse(template, {
      pipeMessage: "| creates text nodes with no trailing space.",
      aposMessage: "' creates text nodes with a trailing space.",
      node: function() {
        var b;
        b = document.createElement('button');
        b.innerText = "Click me and check the console!";
        b.addEventListener('click', function() {
          return console.log("You clicked my node!");
        });
        return b;
      },
      input: input
    });
    root.myInput = input;
    return document.body.appendChild(f);
  };

}).call(this);
